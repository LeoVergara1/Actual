<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Golang on Brandon Vergara </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>https://leovergara1.github.io/tags/golang/index.xml</link>
    <language>en-us</language>
    
    <copyright>Aprendiendo</copyright>
    <updated>Mon, 01 Jan 0001 00:00:00 UTC</updated>
    
    <item>
      <title>String Calculator</title>
      <link>https://leovergara1.github.io/post/StringCalculator/</link>
      <pubDate>Thu, 23 Feb 2017 13:19:00 CST</pubDate>
      
      <guid>https://leovergara1.github.io/post/StringCalculator/</guid>
      <description>&lt;p&gt;Este es un ejercicio de refactor para las pruebas que realizamos a nuestro código, así mismo prueba nuestros conocimientos en los diferentes strings que nos pueden mandar en una cadena y también prueba nuestra lógica para entender las pruebas y aplicarlas, también nos da una selección que dice &amp;ldquo;No confies en una prueba que no falla&amp;rdquo;, con esto me refiero a que debemos hacer pruebas en las que debemos fallar.&lt;/p&gt;

&lt;p&gt;Empezaré por mostrar el problema planteado:&lt;/p&gt;

&lt;p&gt;String Calculator
The following is a TDD Kata- an exercise in coding, refactoring and test-first, that you should apply daily for at least 15 minutes (I do 30).&lt;/p&gt;

&lt;p&gt;Before you start:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Try not to read ahead.&lt;/li&gt;
&lt;li&gt;Do one task at a time. The trick is to learn to work incrementally.&lt;/li&gt;
&lt;li&gt;Make sure you only test for correct inputs. there is no need to test for invalid inputs for this kata&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;String Calculator&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a simple String calculator with a method int Add(string numbers)

&lt;ul&gt;
&lt;li&gt;The method can take 0, 1 or 2 numbers, and will return their sum (for an empty string it will return 0) for example “” or “1” or “1,2”&lt;/li&gt;
&lt;li&gt;Start with the simplest test case of an empty string and move to 1 and two numbers&lt;/li&gt;
&lt;li&gt;Remember to solve things as simply as possible so that you force yourself to write tests you did not think about&lt;/li&gt;
&lt;li&gt;Remember to refactor after each passing test&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Allow the Add method to handle an unknown amount of numbers&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Allow the Add method to handle new lines between numbers (instead of commas).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the following input is ok:  “1\n2,3”  (will equal 6)&lt;/li&gt;

&lt;li&gt;&lt;p&gt;the following input is NOT ok:  “1,\n” (not need to prove it - just clarifying)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Support different delimiters&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;to change a delimiter, the beginning of the string will contain a separate line that looks like this:   “//[delimiter]\n[numbers…]” for example “//;\n1;2” should return three where the default delimiter is ‘;’ .&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;the first line is optional. all existing scenarios should still be supported&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Calling Add with a negative number will throw an exception “negatives not allowed” - and the negative that was passed.if there are multiple negatives, show all of them in the exception message
stop here if you are a beginner. Continue if you can finish the steps so far in less than 30 minutes.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Numbers bigger than 1000 should be ignored, so adding 2 + 1001  = 2&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Delimiters can be of any length with the following format:  “//[delimiter]\n” for example: “//[&lt;strong&gt;&lt;em&gt;]\n1&lt;/em&gt;&lt;/strong&gt;2***3” should return 6&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Allow multiple delimiters like this:  “//[delim1][delim2]\n” for example “//[*][%]\n1*2%3” should return 6.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;make sure you can also handle multiple delimiters with length longer than one char&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Link de referencia = &lt;a href=&#34;http://osherove.com/tdd-kata-1/&#34;&gt;http://osherove.com/tdd-kata-1/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cuando llegue a la cuarta prueba tuve la siguiente característica:
Lo primero que se me ocurrio para dar solución al problema fue lo siguiente&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;if(numbers.size()&amp;gt;1){
numbers = numbers.replace(&amp;quot;\n&amp;quot;,&amp;quot;,&amp;quot;)
Integer e = 0
def lista = numbers.split(&amp;quot;,&amp;quot;)
for(int i=0; i&amp;lt;lista.size();i++){
e = e + lista[i].toInteger()
numbers = e
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;En el cual lograba observar que mi código estaba deficiente ya que era un poco complejo de entender y estaba utilizando un for para iterar la lista.&lt;/p&gt;

&lt;p&gt;Posteriormente tuve un segundo acercamiento, buscando una manera diferente de realizarlo&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;if(numbers.size()&amp;gt;1){
numbers = numbers.replace(&amp;quot;\n&amp;quot;,&amp;quot;,&amp;quot;)
def lista = numbers.split(&amp;quot;,&amp;quot;)
int e = 0
numbers.eachLine(){
  for(e=0; e &amp;lt; numbers.split(&amp;quot;,&amp;quot;).size();e++) {
  lista &amp;lt;&amp;lt; it.split(&amp;quot;,&amp;quot;)[e].toInteger()}
}
numbers = lista.sum()
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Este fragmento de código para ser sincero parecería que fui de mal a peor, sin embargo me dió la pauta para leer bien los conceptos de listas y darme cuenta de que no era necesario el for, dando como resultado el siguiente código.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;if(numbers.size()&amp;gt;1){
numbers = numbers.replace(&amp;quot;\n&amp;quot;,&amp;quot;,&amp;quot;)
def lista = numbers.split(&amp;quot;,&amp;quot;).collect() {it.toInteger()}
return lista.sum()
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Y de esta manera se va mas elegante y entendible.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Es importante saber que un concepto básico para empezar esto es el de decir solo haz lo que pide la prueba y no supongas
En lo personal decidí irme por el lado de las expresiones regulares con el lenguaje groovy y este fue mi primer acercamiento a la solución del problema:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://leovergara1.github.io/images/firstCode.png&#34; alt=&#34;FirstCode&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Ahora trataré de mejorar mi código haciendo más entendible y mejor orientado&lt;/p&gt;

&lt;p&gt;Una vez visualizado el Código, logré hacer refactor a unas cuantas de linéas y el resultado fue el siguiente:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://leovergara1.github.io/images/secondCode.png&#34; alt=&#34;SecondCode&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Base de Datos en Android (Java SQLiteHelper)</title>
      <link>https://leovergara1.github.io/post/BaseAndroid/</link>
      <pubDate>Mon, 20 Feb 2017 09:16:40 CST</pubDate>
      
      <guid>https://leovergara1.github.io/post/BaseAndroid/</guid>
      <description>&lt;p&gt;Primero debemos saber que es muy importante realizar ciertas abstracciones de nuestro código, implementando interfaces lo que hará de nuestra aplicación de mejor calidad.&lt;/p&gt;

&lt;p&gt;Por buenas practicas yo decidí crear un esquema de nuestra base de datos en una clase a diferencia de los demás sitios que por lo regular no hacen, la cual nombre como &amp;ldquo;AccountDBSchema&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://leovergara1.github.io/images/esquemaBase.png&#34; alt=&#34;Estructura&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Cómo se logra observar es una simple estructura de una base de datos sencilla.&lt;/p&gt;

&lt;p&gt;Ahora proseguire a crear la base de datos de la siguiente manera.
El String DATABASE_NAME se indicará el nombre de la base de datos, la versión será la 1 y por ùltimo en la parte que dice String SQL_CREATE_ENTRIES, colocaremos el formato en sql para la creación de la tabla, en la imagen se muestran dos formas de hacerlo pero nosotros ocuparemos la primera, en donde se hace referencia a nuestra clase estructura, falta con ver las dos imágenes y lograremos entender cómo es que está funcionando la referencia a la estructura ya antes creada.
Para dar un poco mas de detalles estamos haciendo referencia a la clase después a  una subclase estática que tiene como nombre un string y posteriormente las columnas.&lt;/p&gt;

&lt;p&gt;Por último en el constructor de nuestra clase Helper colocaremos los datos antes definidos que son la, DATABASE_NAME, y la versión.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://leovergara1.github.io/images/SeCreaBase.png&#34; alt=&#34;Creación&#34; /&gt;&lt;/p&gt;

&lt;p&gt;No pongamos atención al String que dice llamar &amp;ldquo;segundo&amp;rdquo; ya que no  es importante lo use para ciertas pruebas de compilación.
Siguiendo con la explicación como se puede ver en la imagen se realiza una clase para el helper como referencia y le heredamos los atributos de la clase SQLiteOpenHelper en el momento de la herencia nos marcara un error que dá significado a que necesitamos unas clase SQLite para compilar, que son los de &amp;ldquo;onCreate&amp;rdquo;, &amp;ldquo;onUpgrade&amp;rdquo;.
No se logra apreciar de manera correcta el constructor así que lo coloco nuevamente:
public AccountBaseHelper(Context context){
    super(context, DATABASE_NAME, null, VERSION);}
En el cual estamos indicando el contexto y así mismo pasando los parámetros anteriores ya definidos que son la DATABASE_NAME y la VERSIÓN&lt;/p&gt;

&lt;p&gt;En el siguiente método llamado onCreate mandaremos el String con la instrucción sql para crear la tabla y no hay más detalles.
Ahora en el método de onUpgrade enviaremos una instrucción sql en la cual mencionaremos que si no existe la tabla la creé, así como se muestra en la imagen.&lt;/p&gt;

&lt;p&gt;Explicaré rápidamente como se realizaron los siguientes archivos.
Se implementa una interfaz la cual nos manejara los metodos necesarios para manejar nuestra base de datos, de momento solo necesitaremos el método de añadir ya que la finalidad es saber como hacer todo el proceso de conexión, una vez sabiendo eso, el resto es simplemente SQL o en su defecto podemos implementar cursores.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://leovergara1.github.io/images/Interface.png&#34; alt=&#34;Creación&#34; /&gt;&lt;/p&gt;

&lt;p&gt;En esta imagen estoy definiendo la interface que voy a implementar. cabe resaltar que solo usare el metodo de &amp;ldquo;databaseAdd&amp;rdquo; de momento para la explicación.&lt;/p&gt;

&lt;p&gt;Como se puede observar se encuentra en la &amp;ldquo;Package Services&amp;rdquo; para una mejor estructura, posteriormente se crea una clase que se encargara de implementar los metodos de la interface que realizamos. La cual lleva el nombre de &amp;ldquo;ManejaInterface&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://leovergara1.github.io/images/EstructuraCodigo.png&#34; alt=&#34;Creación&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Es importante saber que cuando creamos la clase que implementa la interface, nos marcara un error de compilación debido a que debemos implementar todos los metodos de la interface, como se puede apreciar en la imagen. Lo más importante de esto es tener bien en claro cómo va funcionar el contexto de la aplicación ya que como repito lo necesitaremos en todo momento, en la imagen podemos hacer acercaciones para visualizar descripciones por las líneas de código.
Se logra observar que tenemos dos constructores uno encargado de obtener el contexto de la aplicación para posteriormente pasarlo al helper de la base de datos, ya que esta la requiere para su correcto funcionamiento.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://leovergara1.github.io/images/AnadirBase.png&#34; alt=&#34;Creación&#34; /&gt;&lt;/p&gt;

&lt;p&gt;En esta imagen se realiza toda la función de insert, tengamos muy en claro cómo se lleva acabo el acceso a la base de datos y es muy importante no perder el hilo, para entender cómo llegamos a los datos de ella. Usamos el COntenValues crear un elemento con el cual logremos enviar los datos capturados a la base de datos por medio de la instrucción &amp;ldquo;Put&amp;rdquo; y despues ultilizamos una función del sql llamada Insert la cual se encarga de realizar la inserción en la base de datos indicando la tabla y los elementos del elemento.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Inicio en Android</title>
      <link>https://leovergara1.github.io/post/android/</link>
      <pubDate>Thu, 26 Jan 2017 09:18:40 CST</pubDate>
      
      <guid>https://leovergara1.github.io/post/android/</guid>
      <description>

&lt;p&gt;En este tema hablare sobre como realice y primer aplicación en android, la cual fue iniciada en java como convencionalmente se hace, para posteriormente ser trasladada a groovy.
Programa necesarios para desarrollar en Android:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Android Studio&lt;/li&gt;
&lt;li&gt;Genymotion&lt;/li&gt;
&lt;li&gt;Virtual Box&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Una vez instaladas las aplicaciones, continue a realizar una maquina virtual en Genymotion emulando android 6, ya que tuve este paso, procedí a realizar mi aplicación en Android studio.&lt;/p&gt;

&lt;h3 id=&#34;para-esto-tenemos-2-apartados-importantes&#34;&gt;Para esto tenemos 2 apartados importantes.&lt;/h3&gt;

&lt;p&gt;MainActivity.xml -&amp;gt; En el cual realizaremos toda la parte de diseño para la aplicación.
MainActivity. java -&amp;gt; Se realiza toda la parte del controlador (controller).&lt;/p&gt;

&lt;p&gt;Al iniciar el proyecto en Android Studio realice un análisis de los componentes y opciones que tenia en frente para poco a poco ir entendiendo el funcionamiento del IDE y para iniciarme en este lenguaje se realizara una pequeña aplicación donde se podrá ver el uso de botones, colores, diseños, metodos, multimedia.&lt;/p&gt;

&lt;p&gt;Finalmente explicaré el código realizado en XML para obtener una retroalimentación de lo adquirido&lt;/p&gt;

&lt;h3 id=&#34;vista-del-xml&#34;&gt;Vista del XML&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
&amp;lt;LinearLayout android:orientation=&amp;quot;vertical&amp;quot;
    xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;
    xmlns:tools=&amp;quot;http://schemas.android.com/tools&amp;quot;
    android:layout_width=&amp;quot;match_parent&amp;quot;
    android:layout_height=&amp;quot;match_parent&amp;quot;
    android:gravity=&amp;quot;center&amp;quot;&amp;gt;

    &amp;lt;ImageView
        android:layout_width=&amp;quot;wrap_content&amp;quot;
        android:layout_height=&amp;quot;wrap_content&amp;quot;
        android:src=&amp;quot;@mipmap/ic_launcher&amp;quot;
        android:id=&amp;quot;@+id/photo&amp;quot;/&amp;gt;
    &amp;lt;TextView
        android:layout_width=&amp;quot;wrap_content&amp;quot;
        android:layout_height=&amp;quot;wrap_content&amp;quot;
        android:text=&amp;quot;Hello World!&amp;quot;
        android:id=&amp;quot;@+id/photoName&amp;quot;/&amp;gt;
    &amp;lt;LinearLayout
        android:layout_width=&amp;quot;match_parent&amp;quot;
        android:layout_height=&amp;quot;wrap_content&amp;quot;
        android:gravity=&amp;quot;center&amp;quot;&amp;gt;
        &amp;lt;Button
            android:layout_width=&amp;quot;wrap_content&amp;quot;
            android:layout_height=&amp;quot;match_parent&amp;quot;
            android:text=&amp;quot;false&amp;quot;
            android:id=&amp;quot;@+id/button_false&amp;quot;
            android:textColor=&amp;quot;@color/colorAccent&amp;quot;/&amp;gt;
        &amp;lt;Button
            android:layout_width=&amp;quot;wrap_content&amp;quot;
            android:layout_height=&amp;quot;match_parent&amp;quot;
            android:text=&amp;quot;True&amp;quot;
            android:id=&amp;quot;@+id/button_true&amp;quot;
            android:textColor=&amp;quot;@color/colorPrimaryDark&amp;quot;/&amp;gt;

    &amp;lt;/LinearLayout&amp;gt;
&amp;lt;/LinearLayout&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;&amp;lt;&lt;em&gt;LinearLayout&lt;/em&gt;&amp;gt;&lt;/strong&gt; Diseño de la vista a implementar.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&amp;lt;&lt;em&gt;XMLS&lt;/em&gt;&amp;gt;&lt;/strong&gt; Dirección de Android y sus funciones.&lt;/p&gt;

&lt;p&gt;Android:.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&amp;lt;&lt;em&gt;ImageView&lt;/em&gt;&amp;gt;&lt;/strong&gt; TAG para definir componentes de una imagen determinada&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&amp;lt;&lt;em&gt;TextView&lt;/em&gt;&amp;gt;&lt;/strong&gt; TAG para definir componentes de un texto.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&amp;lt;&lt;em&gt;Button&lt;/em&gt;&amp;gt;&lt;/strong&gt; TAG para definir los componentes de un botón.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
